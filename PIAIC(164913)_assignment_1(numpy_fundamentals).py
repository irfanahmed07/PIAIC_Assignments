# -*- coding: utf-8 -*-
"""Assignment#1(Numpy Fundamentals).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JsS4MNpqW-Qh5DBthhVdT_M2t_4hnCV-

# **Assignment For Numpy**

Difficulty Level **Beginner**

1. Import the numpy package under the name np
"""

import numpy as np

"""2. Create a null vector of size 10 """

import numpy as np
np.zeros(10)

"""3. Create a vector with values ranging from 10 to 49"""

import numpy as np
np.arange(10,50)

"""4. Find the shape of previous array in question 3"""

import numpy as np
a=np.arange(10,50)
np.shape(a)

"""5. Print the type of the previous array in question 3"""

import numpy as np
a=np.arange(10,50)
a.dtype

"""6. Print the numpy version and the configuration

"""

import numpy as np
print(np.__version__)
print(np.show_config())

"""7. Print the dimension of the array in question 3

"""

import numpy as np
a=np.arange(10,50)
a.ndim

"""8. Create a boolean array with all the True values"""

import numpy as np
np.ones(10,dtype=bool)

"""9. Create a two dimensional array



"""

import numpy as np
np.ones((3,3))

"""10. Create a three dimensional array


"""

import numpy as np
np.ones((3,3,3))

"""Difficulty Level **Easy**

11. Reverse a vector (first element becomes last)
"""

import numpy as np
arr=np.arange(10)
arr[::-1]

"""12. Create a null vector of size 10 but the fifth value which is 1 """

import numpy as np
arr=np.zeros(10)
arr[4]=1
arr

"""13. Create a 3x3 identity matrix"""

import numpy as np
np.eye(3)

"""14. arr = np.array([1, 2, 3, 4, 5]) 

---

 Convert the data type of the given array from int to float 
"""

import numpy as np
arr = np.array([1, 2, 3, 4, 5])
arr.astype(float)

"""15. arr1 =          np.array([[1., 2., 3.],

                    [4., 5., 6.]])  
                      
    arr2 = np.array([[0., 4., 1.],
     
                   [7., 2., 12.]])

---


Multiply arr1 with arr2

"""

import numpy as np
arr1=np.array([[1., 2., 3.],[4., 5., 6.]])
arr2=np.array([[0., 4., 1.],[7., 2., 12.]])
arr3=arr1*arr2
arr3

"""16. arr1 = np.array([[1., 2., 3.],
                    [4., 5., 6.]]) 
                    
    arr2 = np.array([[0., 4., 1.], 
                    [7., 2., 12.]])


---

Make an array by comparing both the arrays provided above
"""

import numpy as np
arr1 = np.array([[1., 2., 3.],[4., 5., 6.]]) 
arr2 = np.array([[0., 4., 1.],[7., 2., 12.]])
maximum=np.maximum(arr1,arr2)
maximum

"""17. Extract all odd numbers from arr with values(0-9)"""

import numpy as np
arr=np.arange(0,10)
arr[arr%2==1]

"""18. Replace all odd numbers to -1 from previous array"""

import numpy as np
arr=np.arange(0,10)
np.where(arr%2==1,-1,arr)

"""19. arr = np.arange(10)


---

Replace the values of indexes 5,6,7 and 8 to **12**
"""

import numpy as np
arr=np.arange(10)
arr[5:-1]=12
arr

"""20. Create a 2d array with 1 on the border and 0 inside"""

import numpy as np
x = np.ones((5,5))
x[1:-1,1:-1] = 0
print(x)

"""Difficulty Level **Medium**

21. arr2d = np.array([[1, 2, 3],

                    [4, 5, 6], 

                    [7, 8, 9]])

---

Replace the value 5 to 12
"""

import numpy as np
arr2d=np.array([[1,2,3],[4,5,6],[7,8,9]])
arr2d[1][1]=12
print(arr2d)

"""22. arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

---
Convert all the values of 1st array to 64

"""

import numpy as np
arr3d=np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
arr3d[0]=64
arr3d

"""23. Make a 2-Dimensional array with values 0-9 and slice out the first 1st 1-D array from it"""



"""24. Make a 2-Dimensional array with values 0-9 and slice out the 2nd value from 2nd 1-D array from it"""



"""25. Make a 2-Dimensional array with values 0-9 and slice out the third column but only the first two rows"""



"""26. Create a 10x10 array with random values and find the minimum and maximum values"""



"""27. a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
---
Find the common items between a and b

"""



"""28. a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

---
Find the positions where elements of a and b match


"""



"""29.  names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])  data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will**

"""



"""30. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will** and **Joe**


"""



"""Difficulty Level **Hard**

31. Create a 2D array of shape 5x3 to contain decimal numbers between 1 and 15.
"""

np.arange(1,16,dtype=float).reshape(5,3)

"""32. Create an array of shape (2, 2, 4) with decimal numbers between 1 to 16."""

import numpy as np
np.random.randn(1,16).reshape(2,2,4)

"""33. Swap axes of the array you created in Question 32"""

import numpy as np
ans=np.random.randn(1,16).reshape(2,2,4)
ans.T

"""34. Create an array of size 10, and find the square root of every element in the array, if the values less than 0.5, replace them with 0"""

import numpy as np
data=np.arange(1,11)
find=np.sqrt(data)
find

"""35. Create two random arrays of range 12 and make an array with the maximum values between each element of the two arrays"""

import numpy as np
a=np.random.randint(12)
b=np.random.randint(12)
np.maximum(a,b)

"""36. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

---
Find the unique names and sort them out!

"""

import numpy as np
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
sort=set(names)
sort

"""37. a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])

---
From array a remove all items present in array b


"""

import numpy as np
a = np.array([1,2,3,4,5]) 
b = np.array([5,6,7,8,9])

"""38.  Following is the input NumPy array delete column two and insert following new column in its place.

---
sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]]) 


---

newColumn = numpy.array([[10,10,10]])

"""

import numpy as np
newColumn=np.array([[10,10,10]])
sampleArray = np.array([[34,43,73],[82,22,12],[53,94,66]])
arr=np.delete(sampleArray,1,1)
arr2=np.append((arr,newColumn),1)
arr2(axis=0)

"""39. x = np.array([[1., 2., 3.], [4., 5., 6.]]) y = np.array([[6., 23.], [-1, 7], [8, 9]])


---
Find the dot product of the above two matrix

"""

import numpy as np
x=np.array([[1., 2., 3.], [4., 5., 6.]])
y=np.array([[6., 23.], [-1, 7], [8, 9]])
np.dot(x,y)

"""40. Generate a matrix of 20 random values and find its cumulative sum"""

import numpy as np
arr=np.random.randn(20)
np.cumsum(a,axis=0)